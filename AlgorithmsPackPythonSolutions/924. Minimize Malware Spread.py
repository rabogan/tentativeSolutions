class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        def find_set(x):
            if x == parent[x]:
                return x
            parent[x] = find_set(parent[x])
            return parent[x]

        def union_set(x, y):
            x = find_set(x)
            y = find_set(y)
            if x != y:
                link(x, y)
                nonlocal forests
                forests -= 1
            return x != y

        def link(x, y):
            if cc_size[x] > cc_size[y]:
                x, y = y, x
            parent[x] = y
            cc_size[y] += cc_size[x]

        n = len(graph)
        initial.sort()
        parent = [i for i in range(n)]
        cc_size = [1] * n
        forests = n

        for i in range(n):
            for j in range(n):
                if graph[i][j] == 1:
                    union_set(i, j)

        root_malware_count = [0] * n
        for node in initial:
            root_malware_count[find_set(node)] += 1

        node_remove = initial[0]
        max_infected = -1

        for node in initial:
            parent_cc = find_set(node)
            if root_malware_count[parent_cc] == 1:
                if max_infected < cc_size[parent_cc]:
                    max_infected = cc_size[parent_cc]
                    node_remove = node

        return node_remove
