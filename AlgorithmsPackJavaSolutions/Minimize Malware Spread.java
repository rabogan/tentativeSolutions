import java.util.*;

class Solution {
    private class UnionFind {
        private int forests;
        private int[] ccSize;
        private int[] parent;

        public UnionFind(int n) {
            forests = n;
            ccSize = new int[n];
            parent = new int[n];

            for (int i = 0; i < n; i++) {
                ccSize[i] = 1;
                parent[i] = i;
            }
        }

        private void link(int x, int y) {
            if (ccSize[x] > ccSize[y]) {
                int temp = x;
                x = y;
                y = temp;
            }
            parent[x] = y;
            ccSize[y] += ccSize[x];
        }

        public int findSet(int x) {
            if (x == parent[x]) {
                return x;
            }
            parent[x] = findSet(parent[x]);
            return parent[x];
        }

        public boolean unionSet(int x, int y) {
            x = findSet(x);
            y = findSet(y);
            if (x != y) {
                link(x, y);
                forests--;
            }
            return x != y;
        }

        public int sz(int node) {
            return ccSize[findSet(node)];
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        Arrays.sort(initial);
        int n = graph.length;
        UnionFind uf = new UnionFind(n);

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1) {
                    uf.unionSet(i, j);
                }
            }
        }

        int[] rootMalwareCount = new int[n];
        for (int node : initial) {
            rootMalwareCount[uf.findSet(node)] += 1;
        }

        int nodeRemove = initial[0];
        int maxInfected = -1;

        for (int node : initial) {
            int parentCC = uf.findSet(node);
            if (rootMalwareCount[parentCC] == 1) {
                if (maxInfected < uf.sz(parentCC)) {
                    maxInfected = uf.sz(parentCC);
                    nodeRemove = node;
                }
            }
        }

        return nodeRemove;
    }
}
